// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodesOfTrees.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NodesOfTrees.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240207120020_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NodesOfTrees.Models.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueryParameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("NodesOfTrees.Models.TreeNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TreeNodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c496c40a-edff-4942-8672-abf4c791720f"),
                            Name = "RootTree"
                        },
                        new
                        {
                            Id = new Guid("da63bcc6-ae55-492d-8b0f-6beae1e9f5dc"),
                            Name = "1 - childRoot",
                            ParentId = new Guid("c496c40a-edff-4942-8672-abf4c791720f")
                        },
                        new
                        {
                            Id = new Guid("8d7129ee-8dad-484a-ab37-89dba6aa3fdf"),
                            Name = "2 - childRoot",
                            ParentId = new Guid("c496c40a-edff-4942-8672-abf4c791720f")
                        },
                        new
                        {
                            Id = new Guid("a446cbef-38c1-4e39-bc61-f30a50a10647"),
                            Name = "1 - child - 2 - childRoot",
                            ParentId = new Guid("8d7129ee-8dad-484a-ab37-89dba6aa3fdf")
                        });
                });

            modelBuilder.Entity("NodesOfTrees.Models.TreeNode", b =>
                {
                    b.HasOne("NodesOfTrees.Models.TreeNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NodesOfTrees.Models.TreeNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
